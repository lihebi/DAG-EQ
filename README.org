#+TITLE: Supervised Full DAG Causal Discovery

This is the implementation of our paper [[http://arxiv.org/abs/2006.04697][Supervised Whole DAG Causal Discovery]]. If
this is helpful for your research, please consider cite our paper.

* Running the code

The experiments are sketched in [[file:src/main.jl]]. To run it, you first
instantiate the project invironment, then run

#+begin_example
julia --project src/main.jl
#+end_example

Or you can use the pre-trained models. Pre-trained models can be found at:
- [[https://github.com/lihebi/DAG-EQ/releases/download/v0.1/deep-EQ-d.10_k.1_gtype.SF_noise.Gaussian_mat.COR_step-30000.bson][d=10 pre-trained model]]
- [[https://github.com/lihebi/DAG-EQ/releases/download/v0.1/deep-EQ-d.20_k.1_gtype.SF_noise.Gaussian_mat.COR_step-30000.bson][d=20 pre-trained model]]
- [[https://github.com/lihebi/DAG-EQ/releases/download/v0.1/deep-EQ-d.50_k.1_gtype.SF_noise.Gaussian_mat.COR_step-30000.bson][d=50 pre-trained model]]
- [[https://github.com/lihebi/DAG-EQ/releases/download/v0.1/deep-EQ-d.100_k.1_gtype.SF_noise.Gaussian_mat.COR_step-30000.bson][d=100 pre-trained model]]
You can also found them in the [[https://github.com/lihebi/DAG-EQ/releases/tag/v0.1][release page]].

Load the pretrained models:

#+BEGIN_SRC julia
@load "/path/to/model.bson" model
#+END_SRC

Data can be generated by:

#+BEGIN_SRC julia
spec = DataSpec(d=10, k=1, gtype=gtype, noise=:Gaussian)
ds, test_ds = spec2ds(spec)
#+END_SRC

Apply the model on the data:

#+BEGIN_SRC julia
x, y = next_batch!(test_ds)
pred = model(x)
loss = myσxent(pred, y)
metric = sup_graph_metrics(cpu(σ.(pred)), cpu(y))
@show metrics
#+END_SRC



** script for other methods

The script for running other method is [[file:src/baseline.py]]. You should install
those methods (various python and R projects) before running the script.
